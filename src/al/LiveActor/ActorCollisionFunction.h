#pragma once

#include "al/LiveActor/LiveActor.h"

namespace al {
class TriangleFilterBase;
class CollisionPartsFilterBase;
class ActorCollisionController;

void getActorCollider(const al::LiveActor*);
bool isExistActorCollider(const al::LiveActor*);
void getActorCollisionPartsSensor(const al::LiveActor*);
bool isExistCollisionParts(const al::LiveActor*);
bool isEqualCollisionParts(const al::LiveActor*, const al::CollisionParts*);
void validateCollisionParts(al::LiveActor*);
void invalidateCollisionParts(al::LiveActor*);
void validateCollisionPartsBySystem(al::LiveActor*);
void invalidateCollisionPartsBySystem(al::LiveActor*);
void isValidCollisionParts(const al::LiveActor*);
void setCollisionPartsSpecialPurposeName(al::LiveActor*, const char*);
void resetAllCollisionMtx(al::LiveActor*);
void syncCollisionMtx(al::LiveActor*, const sead::Matrix34f*);
void syncCollisionMtx(al::LiveActor*, al::CollisionParts*, const sead::Matrix34f*);
void setSyncCollisionMtxPtr(al::LiveActor*, const sead::Matrix34f*);
bool isOnGround(const al::LiveActor*, unsigned int);
bool isOnGroundFace(const al::LiveActor*);
bool isCollidedGroundEdgeOrCorner(const al::LiveActor*);
bool isOnGroundNoVelocity(const al::LiveActor*, unsigned int);
bool isOnGroundDegree(const al::LiveActor*, float, unsigned int);
bool isOnGroundFaceDegree(const al::LiveActor*, float);
bool isOnGroundNoVelocityDegree(const al::LiveActor*, float, unsigned int);
void getOnGroundNormal(const al::LiveActor*, unsigned int);
void setColliderRadius(al::LiveActor*, float);
void setColliderOffsetY(al::LiveActor*, float);
void getColliderRadius(const al::LiveActor*);
void getColliderOffsetY(const al::LiveActor*);
void getColliderFixReaction(const al::LiveActor*);
void calcColliderPos(sead::Vector3f*, const al::LiveActor*);
void validateColliderRobustCheck(al::LiveActor*);
void invalidateColliderRobustCheck(al::LiveActor*);
void setColliderReactMovePower(al::LiveActor*, bool);
void calcColliderFloorRotatePower(sead::Quatf*, al::LiveActor*);
void calcJumpInertia(sead::Vector3f*, al::LiveActor*, const sead::Vector3f&, float);
bool isCollidedGround(const al::LiveActor*);
void calcJumpInertiaWall(sead::Vector3f*, al::LiveActor*, float);
bool isCollidedWall(const al::LiveActor*);
void scaleVelocityInertiaWallHit(al::LiveActor*, float, float, float);
void getCollidedWallNormal(const al::LiveActor*);
void calcCollidedNormalSum(const al::LiveActor*, sead::Vector3f*);
void calcGroundNormalOrUpDir(sead::Vector3f*, const al::LiveActor*);
void getCollidedGroundNormal(const al::LiveActor*);
void calcGroundNormalOrGravityDir(sead::Vector3f*, const al::LiveActor*);
void setColliderFilterTriangle(al::LiveActor*, const al::TriangleFilterBase*);
void setColliderFilterCollisionParts(al::LiveActor*, const al::CollisionPartsFilterBase*);
void createAndSetColliderFilterExistActor(al::LiveActor*);
void createAndSetColliderFilterExistActor(al::LiveActor*, al::LiveActor*);
void createAndSetColliderFilterSubActor(al::LiveActor*);
void createAndSetColliderSpecialPurpose(al::LiveActor*, const char*);
void createAndSetColliderSpecialPurposeForCollisionActor(al::LiveActor*, const char*);
void createAndSetColliderIgnoreOptionalPurpose(al::LiveActor*, const char*);
void createAndSetColliderSpecialAndIgnoreOptionalPurpose(al::LiveActor*, const char*, const char*);
void createActorCollisionController(al::LiveActor*);
void setColliderRadius(al::ActorCollisionController*, float);
void setColliderRadiusScale(al::ActorCollisionController*, float);
void setColliderOffsetY(al::ActorCollisionController*, float);
void resetActorCollisionController(al::ActorCollisionController*, int);
void updateActorCollisionController(al::ActorCollisionController*);
void getCollidedFloorMaterialCodeName(const al::LiveActor*);
void getCollidedFloorMaterialCodeName(const al::Collider*);
void getCollidedWallMaterialCodeName(const al::LiveActor*);
void getCollidedCeilingMaterialCodeName(const al::LiveActor*);
bool isCollidedFloorCode(const al::LiveActor*, const char*);
bool isCollidedCollisionCode(const al::LiveActor*, const char*, const char*);
bool isCollidedWallCode(const al::LiveActor*, const char*);
bool isCollidedCameraCode(const al::LiveActor*, const char*);
bool isCollidedMaterialCode(const al::LiveActor*, const char*);
bool isCollidedGroundFloorCode(const al::LiveActor*, const char*);
bool isCollidedGroundCollisionCode(const al::LiveActor*, const char*, const char*);
bool isCollided(const al::LiveActor*);
bool isCollidedCeiling(const al::LiveActor*);
bool isCollidedWallFace(const al::LiveActor*);
bool isCollidedVelocity(const al::LiveActor*);
bool isCollidedWallVelocity(const al::LiveActor*);
bool isCollidedCeilingVelocity(const al::LiveActor*);
void getCollidedCeilingNormal(const al::LiveActor*);
void getCollidedGroundPos(const al::LiveActor*);
void getCollidedWallPos(const al::LiveActor*);
void getCollidedCeilingPos(const al::LiveActor*);
void calcSpeedCollideWall(const al::LiveActor*);
void calcSpeedCollideGround(const al::LiveActor*);
void calcSpeedCollideCeiling(const al::LiveActor*);
void getCollidedGroundCollisionParts(const al::LiveActor*);
bool tryGetCollidedGroundCollisionParts(const al::LiveActor*);
void getCollidedWallCollisionParts(const al::LiveActor*);
bool tryGetCollidedWallCollisionParts(const al::LiveActor*);
void getCollidedCeilingCollisionParts(const al::LiveActor*);
bool tryGetCollidedCeilingCollisionParts(const al::LiveActor*);
void getCollidedGroundSensor(const al::LiveActor*);
bool tryGetCollidedGroundSensor(const al::LiveActor*);
void getCollidedWallSensor(const al::LiveActor*);
bool tryGetCollidedWallSensor(const al::LiveActor*);
void getCollidedCeilingSensor(const al::LiveActor*);
bool tryGetCollidedCeilingSensor(const al::LiveActor*);
bool tryGetCollidedSensor(const al::LiveActor*);
bool tryGetCollidedPos(sead::Vector3f*, const al::LiveActor*);
void setForceCollisionScaleOne(const al::LiveActor*);
void followRotateFrontAxisUpGround(al::LiveActor*);
void followRotateFrontAxisUp(al::LiveActor*, const al::CollisionParts*);
// void ActorFactory::ActorFactory(const char*);
}  // namespace al
